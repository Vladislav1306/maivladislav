#include<opencv2/opencv.hpp>
#include <opencv\cv.h>
#include <opencv2\highgui\highgui.hpp>
#include <opencv2\imgproc\imgproc.hpp>
#include <WinSock2.h>
#include <WS2tcpip.h>
#include <stdio.h>
#include <iostream>

#pragma comment(lib, "Ws2_32.lib")
#define default_buflen 1024

using namespace std;
using namespace cv;

#define default_port "1234"
int main(int argc, char** argv)
{
	Mat capture;
	VideoCapture cap(0);
	if (!cap.isOpened())
	{
		cout << "Cannot connect to camera" << endl;
		getchar();
		return -1;
	}

	//namedWindow("Display", CV_WINDOW_AUTOSIZE);

	double dWidth = cap.get(CV_CAP_PROP_FRAME_WIDTH);
	double dHeight = cap.get(CV_CAP_PROP_FRAME_HEIGHT);

	Size frameSize(static_cast<int>(dWidth), static_cast<int>(dHeight));

	VideoWriter oVideoWriter("robot.avi", CV_FOURCC('F', 'L', 'V', '1'), 24, frameSize);

	if (!oVideoWriter.isOpened())
	{
		cout << "ERROR: Failed to write the video" << endl;
		return -1;
	}

	while (true)
	{
		Mat frame;
		Mat gray_image;
		Mat edge;
		Mat filter;
		Mat size;

		vector<Vec4i> lines;
		int i = 0;

		bool bSuccess = cap.read(frame); // read a new frame from video

		if (!bSuccess) //if not success, break loop
		{
			cout << "ERROR: Cannot read a frame from video file" << endl;
			break;
		}

		cvtColor(frame, gray_image, COLOR_BGR2GRAY);
		GaussianBlur(gray_image, filter, Size(7, 7), 1.5);
		Canny(filter, edge, 50, 150, 3);
		//HoughLinesP(edge, lines, 1, CV_PI / 180, 50, 10, 250);

		//// нарисуем найденные линии
		//for (size_t i = 0; i < lines.size(); i++) {
		//	Vec4i l = lines[i];
		//	line(frame, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(255, 0, 0), 3, LINE_AA);
		//}

		vector<vector<Point> > contours;
		findContours(edge, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);

		for (size_t i = 0; i < contours.size(); i++)
		{
			Rect minRect = boundingRect(contours[i]);

			if (minRect.width > 50 & minRect.height > 50)
			{
				rectangle(frame, minRect, Scalar(0, 0, 255));
				putText(frame, format("width = %d , height = %d", minRect.width, minRect.height), Point(minRect.x, minRect.y),
					FONT_HERSHEY_PLAIN, 1, Scalar(0, 255, 0));
				cout << "width: " << minRect.width << " ";
				cout << "height: " << minRect.height << "\n";
			}
		}
			oVideoWriter.write(frame); //writer the frame into the file
		
			imshow("Display", frame);

			if (waitKey(1) == 27)
			{
				cout << "esc key is pressed by user" << endl;
				break;
			}
	}
}
